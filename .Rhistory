} else
if(NROW(n)!=NCOL(x)) stop("invalid 'n'")
# Bin data in 'x'
qd <- sapply(1:NCOL(x), function(i) quantize(x[,i],n=n[i],FUN=FUN,...))
# Aggregate probabilities
probs <- rep(1/NROW(x),NROW(x))
res <- aggregate(probs, by=lapply(1:NCOL(qd), function(i) qd[,i]), sum)
# Clean up output, return lsp object
colnames(res) <- colnames(x)
res <- lsp(res[,1:NCOL(x)],res[,NCOL(res)])
return(res)
}
# Example
N <- 30
x <- rnorm(N)/100; y <- rnorm(N)/100; z <- rnorm(N)/100
zz <- cbind(x,y,z)
(jpt <- jointProbTable(zz,n=c(4,3,3)))
zz
jpt <- jointProbTable(zz,n=c(4,3,3))
install.packages('LSPM')
jpt <- jointProbTable(zz,n=c(4,3,3))
smoke <- matrix(c(51,43,22,92,28,21,68,22,9),ncol=3,byrow=TRUE)
colnames(smoke) <- c("High","Low","Middle")
rownames(smoke) <- c("current","former","never")
smoke <- as.table(smoke)
smoke
barplot(smoke,legend=T,beside=T,main='Smoking Status by SES')
plot(smoke,main="Smoking Status By Socioeconomic Status")
barplot(smoke,legend=T,beside=T,main='Smoking Status by SES')
plot(smoke,main="Smoking Status By Socioeconomic Status")
margin.table(smoke)
margin.table(smoke,1)
margin.table(smoke,2)
51+43+22
smoke/margin.table(smoke)
smoke/margin.table(smoke)
margin.table(smoke,1)/margin.table(smoke)
margin.table(smoke,2)/margin.table(smoke)
prop.table(smoke)
prop.table(smoke,1)
prop.table(smoke,2)
summary(smoke)
expected <- as.array(margin.table(smoke,1)) %*% t(as.array(margin.table(smoke,2))) / margin.table(smoke)
expected
chi <- sum((expected - as.array(smoke))^2/expected)
chi
smokerData <- read.csv(file='smoker.csv',sep=',',header=T)
smoke <- table(smokerData$Smoke,smokerData$SES)
mosaicplot(smoke)
help(mosaicplot)
install.packages('mosaicplot')
library(mosaicplot )
library(mosaicplot)
mosaicplot(smoke)
help(mosaicplot)
mosaicplot(smoke)
mosaicplot(smoke,main="Smokers",xlab="Status",ylab="Economic Class")
mosaicplot(smoke,main="Smokers",xlab="Status",ylab="Economic Class")
mosaicplot(smoke,sort=c(2,1))
mosaicplot(smoke,main="Smokers",xlab="Status",ylab="Economic Class")
mosaicplot(smoke,dir=c("v","h"))
mosaicplot(smoke,main="Smokers",xlab="Status",ylab="Economic Class")
mosaicplot(smoke,dir=c("v","h"))
smoke <- matrix(c(51,43,22,92,28,21,68,22,9),ncol=3,byrow=TRUE)
colnames(smoke) <- c("High","Low","Middle")
rownames(smoke) <- c("current","former","never")
smoke <- as.table(smoke)
smoke
smoke <- matrix(c(51,43,22,92,28,21,68,22,9),ncol=3,byrow=TRUE)
colnames(smoke) <- c("High","Low","Middle")
rownames(smoke) <- c("current","former","never")
smoke <- as.table(smoke)
smoke
barplot(smoke,legend=T,beside=T,main='Smoking Status by SES')
plot(smoke,main="Smoking Status By Socioeconomic Status")
margin.table(smoke)
margin.table(smoke,1)
margin.table(smoke,2)
smoke/margin.table(smoke)
margin.table(smoke,1)/margin.table(smoke)
margin.table(smoke,2)/margin.table(smoke)
prop.table(smoke)
prop.table(smoke,1)
prop.table(smoke,2)
summary(smoke)
expected <- as.array(margin.table(smoke,1)) %*% t(as.array(margin.table(smoke,2))) / margin.table(smoke)
expected
chi <- sum((expected - as.array(smoke))^2/expected)
chi
mosaicplot(smoke)
help(mosaicplot)
mosaicplot(smoke,main="Smokers",xlab="Status",ylab="Economic Class")
mosaicplot(smoke,main="Smokers",xlab="Status",ylab="Economic Class")
mosaicplot(smoke,sort=c(2,1))
mosaicplot(smoke)
mosaicplot(smoke,main="Smokers",xlab="Status",ylab="Economic Class")
mosaicplot(smoke,main="Smokers",xlab="Status",ylab="Economic Class")
mosaicplot(smoke,sort=c(2,1))
mosaicplot(smoke,main="Smokers",xlab="Status",ylab="Economic Class")
mosaicplot(smoke,dir=c("v","h"))
library("ggplot2")
library("dplyr")
library("reshape2")
library("knitr")
diamonds.color.cut.df <-
diamonds %>%
group_by(color, cut) %>%
summarize(n = n())
diamonds.color.cut.df %>%
dcast(color ~ cut, value.nar = "n") %>%
kable(align = "l", format = "html",
table.attr='class="table table-striped table-hover"')
diamonds.color.cut.df <-
diamonds %>%
group_by(color, cut) %>%
summarize(n = n())
diamonds.color.cut.df %>%
dcast(color ~ cut, value.nar = "n") %>%
kable(align = "l", format = "html",
table.attr='class="table table-striped table-hover"')
diamonds.color.cut.df %>%
dcast(color ~ cut, value.nar = "n") %>%
kable(align = "l", format = "latex",
table.attr='class="table table-striped table-hover"')
diamonds.color.cut.df %>%
dcast(color ~ cut, value.nar = "n") %>%
kable(align = "l", format = "html",
table.attr='class="table table-striped table-hover"')
diamonds.color.cut.df %>%
dcast(color ~ cut, value.nar = "n") %>%
kable(align = "l", format = "latex",
table.attr='class="table table-striped table-hover"')
diamonds.color.cut.df %>%
dcast(color ~ cut, value.nar = "n") %>%
kable(align = "l", format = "latex")
diamonds.color.cut.df %>%
dcast(color ~ cut, value.nar = "n") %>%
kable(align = "l", format = "rst")
diamonds.color.cut.df %>%
dcast(color ~ cut, value.nar = "n") %>%
kable(align = "l", format = "pandoc")
diamonds.color.cut.df %>%
dcast(color ~ cut, value.nar = "n") %>%
kable(align = "l", format = "pandoc")
diamonds.color.cut.df %>%
dcast(color ~ cut, value.nar = "n") %>%
kable(align = "l", format = "rst")
diamonds.color.cut.df %>%
dcast(color ~ cut, value.nar = "n") %>%
kable(align = "l", format = "markdown")
diamonds.color.cut.prop.df %>%
dcast(color ~ cut, value.var = "prop") %>%
kable(align = "l", format = "rst")
diamonds.color.cut.prop.df %>%
dcast(color ~ cut, value.var = "prop") %>%
kable(align = "l", format = "html",
table.attr = 'class="table table-striped table-hover"')
diamonds.color.cut.prop.df <-
diamonds.color.cut.df %>%
ungroup() %>%
mutate(prop = n / sum(n))
diamonds.color.cut.prop.df %>%
dcast(color ~ cut, value.var = "prop") %>%
kable(align = "l", format = "html",
table.attr = 'class="table table-striped table-hover"')
diamonds.color.cut.prop.df %>%
dcast(color ~ cut, value.var = "prop") %>%
kable(align = "l", format = "rst")
diamonds.color.cut.df %>%
dcast(color ~ cut, value.nar = "n") %>%
kable(align = "l", format = "markdown")
diamonds.color.cut.prop.df %>%
dcast(color ~ cut, value.var = "prop") %>%
kable(align = "l", format = "rst")
color.marginal.df <-
diamonds.color.cut.prop.df %>%
group_by(color) %>%
summarize(marginal = sum(prop))
cut.marginal.df <-
diamonds.color.cut.prop.df %>%
group_by(cut) %>%
summarize(marginal = sum(prop))
diamonds.color.cut.prop.df %>%
dcast(color ~ cut, value.var = "prop") %>%
left_join(color.marginal.df, by = "color") %>%
bind_rows(
cut.marginal.df %>%
mutate(color = "marginal") %>%
dcast(color ~ cut, value.var = "marginal")
) %>%
kable(align = "l", format = "rst")
joint.prob <-
diamonds.color.cut.prop.df %>%
filter(color == "G", cut == "Ideal") %>%
.$prop
marg.prob <-
cut.marginal.df %>%
filter(cut == "Ideal") %>%
.$marginal
cond.prob <- joint.prob / marg.prob
cond.prob
p <- matrix(c(.02,.04,.01,.06,.15,.15,.02,.20,.14,.10,.10,.01),ncol=4) ## this line creates matrix p
p
test1 <- c(1,2,3,4)  ## this line creates the object called "test1"
test1
test2 <- matrix(c(1,2,3,4), ncol=1)  ## this line creates the object called "test2"
test2
test3 <- matrix(c(1,2,3,4),ncol=2)   ## this line creates the object called "test3"
test3
test4 <- matrix(c(1,2,3,4,5,6), ncol=2)  ## this line creates the object called "test4"
test4
test5 <- matrix(c(1,2,3,4,5,6), ncol=3)  ## this line creates the object called "test5"
test5
test6 <- matrix(c(1,2,3,4,5,6,7,8,9), ncol=3)  ## this line creates the object called "test5"
test6
test7 <- matrix(c(1,2,3,4,5,6,7,8,9), ncol=2)  ## this line creates the object called "test5"
test7
test7 <- matrix(c(1,2,3,4,5,6,7,8), ncol=2)  ## this line creates the object called "test5"
test7
p[2,3]
p
p[2,3]
p[3,2]
p[2,3]
p[3,2]
sum(p)
px <- apply(p,1,sum) ## create marginal probabilities for X
px                   ## display these marginal probabilities
py <- apply(p,2,sum) ## create marginal probabilities for X
py                   ## display these marginal probabilities
p_x5_y5 <- p[2,2]/py[2]  ## computes conditional probability P(X=5|Y=5)
p_x5_y5
p[2,2]
py[2]
0.15/0.36
py                   ## display these marginal probabilities
smoke <- matrix(c(51,43,22,92,28,21,68,22,9),ncol=3,byrow=TRUE)
p <- matrix(c(.02,.04,.01,.06,.15,.15,.02,.20,.14,.10,.10,.01),ncol=4) ## this line creates matrix p
p
colnames(p) <- c("Y=0","Y=5","Y=10", "Y=15")
rownames(p) <- c("X=0","X=5","X=10")
P
p
test1 <- c(1,2,3,4)  ## this line creates the object called "test1"
test1
test2 <- matrix(c(1,2,3,4), ncol=1)  ## this line creates the object called "test2"
test2
test3 <- matrix(c(1,2,3,4),ncol=2)   ## this line creates the object called "test3"
test3
test4 <- matrix(c(1,2,3,4,5,6), ncol=2)  ## this line creates the object called "test4"
test4
test5 <- matrix(c(1,2,3,4,5,6), ncol=3)  ## this line creates the object called "test5"
test5
test6 <- matrix(c(1,2,3,4,5,6,7,8,9), ncol=3)  ## this line creates the object called "test5"
test6
test7 <- matrix(c(1,2,3,4,5,6,7,8), ncol=2)  ## this line creates the object called "test5"
test7
p[2,3]
p[3,2]
sum(p)
px <- apply(p,1,sum) ## create marginal probabilities for X
px                   ## display these marginal probabilities
py <- apply(p,2,sum) ## create marginal probabilities for X
py                   ## display these marginal probabilities
p[2,2]
py[2]
p_x5_y5 <- p[2,2]/py[2]  ## computes conditional probability P(X=5|Y=5)
p_x5_y5
x<- c(0,5,10)
y<- c(0,5,10,15)
EX  <- sum(px*x)   ## expectation of X
EX2 <- sum(px*x^2) ## expectation of X^2
EX
EX2
EX_Y5 <- sum(p_x_y5*x)
p_x_y5 <- c(p_x0_y5,p_x5_y5,p_x10_y5)
p_x_y5 <- c(p_x0_y5,p_x5_y5,p_x10_y5)
p_x5_y5 <- p[2,2]/py[2]  ## computes conditional probability P(X=5|Y=5)
p_x5_y5
p_x_y5 <- c(p_x0_y5,p_x5_y5,p_x10_y5)
#### The best
library(apcluster)
cl1 <- cbind(rnorm(30, 0.3, 0.05), rnorm(30, 0.7, 0.04))
cl2 <- cbind(rnorm(30, 0.7, 0.04), rnorm(30, 0.4, .05))
x1 <- rbind(cl1, cl2)
x1 <- cbind(dados$LONGITUDE, dados$LATITUDE)
x1
plot(x1, xlab="", ylab="", pch=19, cex=0.8)
apres1a <- apcluster(negDistMat(r=2), x1[1:2000,])
s1 <- negDistMat(x1, r=2)
apres1b <- apcluster(s1)
apres1a
x1
plot(x1, xlab="", ylab="", pch=19, cex=0.8)
apres1a <- apcluster(negDistMat(r=2), x1[1:2000,])
s1 <- negDistMat(x1, r=2)
a = c(0,1,2,1,0,1,2,1,0)
b = c(2,3,4,3,4,5,4,5,6)
a
b
matrix(a, nrow = 3)
matrix(b, nrow = 3)
#https://districtdatalabs.silvrback.com/conditional-probability-with-r
ab = cbind(a, b)
ab = as.data.frame(ab)
ab
dice <- function(no_of_rolls=1){
x <- sample(1:6, size=no_of_rolls, replace=TRUE)
y <- sample(1:6, size=no_of_rolls, replace=TRUE)
return(cbind(x,y))
}
set.seed(20485)
rolls <- as.data.frame(dice(100000))
rolls1 <- ab
library(plyr)
freq_table <- ddply(rolls, ~x, summarize,
y1=sum(y==1), y2=sum(y==2), y3= sum(y==3),
y4 = sum(y==4), y5=sum(y==5), y6=sum(y==6))
row.names(freq_table) <- paste0('x',1:6)
prob_table <- freq_table[,-1]/100000
prob_table
options(scipen=999)
amin= min(ab$a)
amin
amax = max(ab$a)
amax
bmin = min(ab$b)
bmin
bmax = max(ab$b)
bmax
freq_table <- ddply(rolls1, ~a, summarize,
"2"=sum(b==2), "3"= sum(b==3),
"4" = sum(b==4), "5"=sum(b==5), "6"=sum(b==6))
ddply(rolls1, ~a, summarize,
"2"=sum(b==2), "3"= sum(b==3),
"4" = sum(b==4), "5"=sum(b==5), "6"=sum(b==6))
row.names(freq_table) <- c(amin: amax)
prob_table <- freq_table[,-1]/10
prob_table
View(prob_table)
library(RANN)
set.seed(123)
## simulate some data
lon = runif(100, -99.1, -99)
lat = runif(100, 33.9, 34)
## data is a 100 x 2 matrix (can also be data.frame)
mydata <- cbind(lon, lat)
radius <- 0.02   ## your radius
res <- nn2(mydata, k=nrow(mydata), searchtype="radius", radius = radius)
## prints total number of nearest neighbors (for all points) found using "radius"
print(length(which(res$nn.idx>0)))
##[1] 1224
res1 <- nn2(mydata, k=100, radius = radius)
## prints total number of nearest neighbors (for all points) found using your call
print(length(which(res1$nn.idx>0)))
radius <- 0.03   ## increase radius
res <- nn2(mydata, k=nrow(mydata), searchtype="radius", radius = radius)
## prints total number of nearest neighbors (for all points) found using "radius"
print(length(which(res$nn.idx>0)))
##[1] 2366
res1 <- nn2(mydata, k=100, radius = radius)
## prints total number of nearest neighbors (for all points) found using your call
print(length(which(res1$nn.idx>0)))
##[1] 10000
count <- rowSums(res$nn.idx > 0) - 1
count
smoke <- matrix(c(1, 2, 1, 0, 0, 1, 2, 1),ncol=4,byrow=TRUE)
smoke
colnames(smoke) <- c("0","1","2", "3")
rownames(smoke) <- c("0","1")
smoke <- as.table(smoke)
smoke
barplot(smoke,legend=T,beside=T,main='Smoking Status by SES')
plot(smoke,main="Smoking Status By Socioeconomic Status")
margin.table(smoke)
margin.table(smoke,1)
margin.table(smoke,2)
smoke/margin.table(smoke)
margin.table(smoke,1)/margin.table(smoke)
margin.table(smoke,2)/margin.table(smoke)
margin.table(smoke)
margin.table(smoke,1)
margin.table(smoke,2)
smoke/margin.table(smoke)
margin.table(smoke,1)/margin.table(smoke)
margin.table(smoke,2)/margin.table(smoke)
prop.table(smoke)
prop.table(smoke,1)
prop.table(smoke,2)
summary(smoke)
expected <- as.array(margin.table(smoke,1)) %*% t(as.array(margin.table(smoke,2))) / margin.table(smoke)
expected
chi <- sum((expected - as.array(smoke))^2/expected)
chi
mosaicplot(smoke)
help(mosaicplot)
mosaicplot(smoke,main="Smokers",xlab="Status",ylab="Economic Class")
mosaicplot(smoke,main="Smokers",xlab="Status",ylab="Economic Class")
mosaicplot(smoke,sort=c(2,1))
mosaicplot(smoke,main="Smokers",xlab="Status",ylab="Economic Class")
mosaicplot(smoke,dir=c("v","h"))
# Extração do MySQL
#SELECT pontoLat, pontoLong, pontoEnd, idtipoSinal, tipoSinalDesc, pontoVagas
#FROM ponto p, tipoSinal t
#WHERE p._idtipoSinal = t.idtipoSinal
#http://rpubs.com/sirelena/DP1R_Markdown_and_Leaflet
# SELECT pontoLat, pontoLong, pontoEnd, _idtipoSinal, tipoSinalDesc, pontoVagas FROM ponto p, tipoSinal t WHERE p._idtipoSinal = t.idtipoSinal
library(leaflet)
library(yaml)
setwd("~/R-files/vainavaga/")
base <- read.csv('tipoSinal.csv', header = TRUE, sep = ";", fileEncoding = "UTF-8")
names(base) <- c("lat", "long", "depth", "mag", "stations", "pontoVagas")
base$mag <- as.numeric(base$mag)
dfbase <- base
names(dfbase)
dim(dfbase)
dfbase <- dfbase[dfbase$mag == 1, ]
dim(dfbase)
dfbase$lat = dfbase$lat - .0008
getColor <- function(base) {
sapply(base$mag, function(mag) {
if(mag <= 1) {
"blue"
} else if(mag <= 2) {
"green"
} else if(mag <= 4) {
"pink"
} else if(mag <= 6) {
"orange.png"
} else if(mag <= 7) {
"gray"
} else if(mag <= 8) {
"black"
} else if(mag <= 9) {
"red"
} else if(mag <= 12) {
"purple"
} else if(mag <= 13) {
"pink"
} else {
"black"
} })
}
icons <- awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
markerColor = getColor(dfbase)
)
leaflet(dfbase) %>% addTiles() %>%
addAwesomeMarkers(~long, ~lat, icon=icons, label=~as.character(paste(mag, stations, depth, "Vagas:", pontoVagas, sep = ", ")), clusterOptions = markerClusterOptions())
leafIcons <- icons(
sapply(base$mag, function(mag) {
if(mag <= 1) {
"img/1.png"
} else if(mag <= 2) {
"img/2.png"
} else if(mag <= 3) {
"img/3.png"
} else if(mag <= 4) {
"img/4.png"
} else if(mag <= 5) {
"img/5.png"
} else if(mag <= 6) {
"img/6.png"
} else if(mag <= 7) {
"img/7.png"
} else if(mag <= 8) {
"img/8.png"
} else if(mag <= 9) {
"img/9.png"
} else if(mag <= 10) {
"img/10.png"
} else if(mag <= 11) {
"img/11.png"
} else if(mag <= 12) {
"img/12.png"
} else if(mag <= 13) {
"img/13.png"
} else if(mag <= 14) {
"img/14.png"
} else if(mag <= 15) {
"img/15.png"
} else if(mag <= 16) {
"img/16.png"
} else if(mag <= 17) {
"img/17.png"
} else if(mag <= 18) {
"img/18.png"
} else if(mag <= 19) {
"img/19.png"
} else {
"img/10.png"
} }),
iconWidth = 45, iconHeight = 45,
iconAnchorX = 22, iconAnchorY = 94,
shadowUrl = "img/sombra.png",
shadowWidth = 50, shadowHeight = 10,
shadowAnchorX = 20, shadowAnchorY = 52
)
leaflet(dfbase) %>% addTiles() %>%
addMarkers(~long, ~lat, icon=leafIcons, label=~as.character(paste( stations,",", depth,",", pontoVagas,"Vagas", sep = " ")), clusterOptions = markerClusterOptions())
leaflet(dfbase) %>% addTiles() %>%
addMarkers(~long, ~lat, icon=leafIcons, label=~as.character(paste( stations,",", depth,",", pontoVagas,"Vagas", sep = " ")))
leaflet(dfbase) %>%
addMarkers(~long, ~lat, icon=leafIcons, label=~as.character(paste( stations,",", depth,",", pontoVagas,"Vagas", sep = " ")))
leaflet(dfbase) %>% addTiles() %>%
addMarkers(~long, ~lat, icon=leafIcons, label=~as.character(paste( stations,",", depth,",", pontoVagas,"Vagas", sep = " ")))
q(0.1,9)
q(0.1,9)
?q
q(0,2)
